# backend/app/models.py
from typing import Optional, List
from datetime import datetime
from sqlmodel import SQLModel, Field, Relationship
from sqlalchemy import Column
from sqlalchemy.dialects.postgresql import JSONB

class PhotoUserLink(SQLModel, table=True):
    __tablename__ = "photo_user_link"
    photo_id: int = Field(foreign_key="event_photo.id", primary_key=True)
    user_id: int = Field(foreign_key="user.id", primary_key=True)

class User(SQLModel, table=True):
    __tablename__ = "user"
    id: Optional[int] = Field(default=None, primary_key=True)
    email: str = Field(sa_column=Column(unique=True, nullable=False))
    name: str
    profile_photo_url: Optional[str] = None
    # Additional user information
    company: Optional[str] = None
    position: Optional[str] = None

    credential: Optional["Credential"] = Relationship(back_populates="user", sa_relationship_kwargs={"uselist": False})
    event_photos: List["EventPhoto"] = Relationship(back_populates="users", link_model=PhotoUserLink)
    # QR codes generated by the user
    qr_contacts: List["QRContact"] = Relationship(back_populates="user")

class Credential(SQLModel, table=True):
    __tablename__ = "credential"
    user_id: int = Field(foreign_key="user.id", primary_key=True)
    password_hash: str
    created_at: datetime = Field(default_factory=datetime.utcnow)

    user: User = Relationship(back_populates="credential")

class EventPhoto(SQLModel, table=True):
    __tablename__ = "event_photo"
    id: Optional[int] = Field(default=None, primary_key=True)
    s3_key: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    processed: bool = Field(default=False)

    users: List[User] = Relationship(back_populates="event_photos", link_model=PhotoUserLink)

class Embedding(SQLModel, table=True):
    __tablename__ = "embedding"
    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="user.id", nullable=False)
    vector: List[float] = Field(
        default_factory=list,
        sa_column=Column(JSONB, nullable=False)
    )
    created_at: datetime = Field(default_factory=datetime.utcnow)


class QRContact(SQLModel, table=True):
    __tablename__ = "qr_contact"

    id: Optional[int] = Field(default=None, primary_key=True, index=True)
    user_id: int = Field(foreign_key="user.id", nullable=False)
    qr_data: dict = Field(
        sa_column=Column("qr_data", JSONB, nullable=False)
    )
    qr_url: str = Field(nullable=False)
    generated_at: datetime = Field(default_factory=datetime.utcnow)

    # Inverse relationship to User model
    user: "User" = Relationship(back_populates="qr_contacts")
